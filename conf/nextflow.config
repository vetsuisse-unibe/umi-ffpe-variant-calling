// Global default params, used in configs
params {
    // Input options
    reads = "raw_data/fastq/*_L00{1,2,3,4}_R{1,2,3}_001.fastq.gz"
    outdir = "raw_data/results"
    
    //Reference files
    genome = "/data/references/Canis_lupus_familiaris/UCSC/UU_Cfam_GSD_1.0_canFam4/Sequence/bwa/UU_Cfam_GSD_1.0_ROSY.fa"
    genome_index = "/data/references/Canis_lupus_familiaris/UCSC/UU_Cfam_GSD_1.0_canFam4/Sequence/bwa/UU_Cfam_GSD_1.0_ROSY.{amb,ann,bwt.2bit.64,pac,0123}"
    genome_dict = "/data/references/Canis_lupus_familiaris/UCSC/UU_Cfam_GSD_1.0_canFam4/Sequence/bwa/UU_Cfam_GSD_1.0_ROSY.dict"
    genome_fai = "/data/references/Canis_lupus_familiaris/UCSC/UU_Cfam_GSD_1.0_canFam4/Sequence/bwa/UU_Cfam_GSD_1.0_ROSY.fa.fai"
    known_variants = "/data/references/Canis_lupus_familiaris/UCSC/UU_Cfam_GSD_1.0_canFam4/Variation/UU_Cfam_GSD_1.0.BQSR.DB.bed.gz"
    known_variants_index = "/data/references/Canis_lupus_familiaris/UCSC/UU_Cfam_GSD_1.0_canFam4/Variation/UU_Cfam_GSD_1.0.BQSR.DB.bed.gz.tbi"

    // Max resource parameters
    max_memory = 128.GB
    max_cpus = 16
    max_time = 72.h
}

profiles {
    unibe {
        process {
            executor = 'slurm'
            queue = 'pibu_el8'
            clusterOptions = '--partition=pibu_el8'
        }
        
        // Default resource settings
        process {
            cpus = { check_max(1 * task.attempt, 'cpus') }
            memory = { check_max(4.GB * task.attempt, 'memory') }
            time = { check_max(1.h * task.attempt, 'time') }
            
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries = 3
            maxErrors = '-1'
        }
        
        // Process-specific settings
        process {
            withName: TRIM_READS {
                module = 'fastp/0.23.4-GCC-10.3.0'
                cpus = { check_max(4 * task.attempt, 'cpus') }
                memory = { check_max(8.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt, 'time') }
            }
            
            withName: ALIGN_READS {
                module = {
                    if (params.aligner == 'bwa-mem2') 'BWA-MEM2/2.2.1-GCC-10.3.0'
                    else if (params.aligner == 'bwa') 'BWA/0.7.17-GCC-10.3.0'
                    else null
                }
                container = {
                    if (params.aligner == 'dragen-os') '/mnt/containers/apptainer/dragmap:1.3.0--h91baf5a_3'
                    else null
                }
                cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(64.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
            }

            withName: ANNOTATE_UMIS {
                container = '/mnt/containers/apptainer/fgbio:2.3.0--hdfd78af_0'
                cpus = { check_max(4 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt, 'time') }
            }

            withName: MERGE_BAMS {
                module = 'picard/2.25.5-Java-13'
                cpus = { check_max(4 * task.attempt, 'cpus') }
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
            }

            withName: MARK_DUPLICATES {
                module = 'picard/2.25.5-Java-13'
                cpus = { check_max(4 * task.attempt, 'cpus') }
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
            }

            withName: 'BQSR|CALL_VARIANTS|GENOTYPE_GVCFS|FILTER_VARIANTS' {
                module = 'GATK/4.2.6.1-GCCcore-10.3.0-Java-11'
                cpus = { check_max(4 * task.attempt, 'cpus') }
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
            }

            withName: ANNOTATE_VARIANTS {
                module = 'Java/17.0.6'
                cpus = { check_max(2 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt, 'time') }
            }
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Enable singularity for container support
singularity {
    enabled = true
    autoMounts = true
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name = 'umi-ffpe-variant-calling'
    author = 'Vidhya Jagannathan'
    homePage = 'https://github.com/vetsuisse-unibe/umi-ffpe-variant-calling.git'
    description = 'Nextflow pipeline for UMI-based FFPE variant calling'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.10.3'
    version = '1.0.0'
}